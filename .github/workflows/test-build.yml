name: E2E and build testing.

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the develop and master branches
on:
  pull_request:
    branches: [develop, master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  resolve_dep:
    runs-on: ubuntu-latest
    outputs:
      BE_TAG: ${{ steps.resolve_rep.outputs.BE_TAG }}
      FACTORY_TAG: ${{ steps.resolve_rep.outputs.FACTORY_TAG }}

    steps:
      - name: Resolve required repositories
        id: resolve_rep
        run: |
          # this assumes the result is an array, and .name property is used
          check_feature() {
            # first param is the branch, everything after is endpoint for curl
            local branch=$1
            local found=0

            shift

            for endpoint in $@; do
              local json=$(curl -s $endpoint)
              local branch_found=$(echo $json | jq -c ".[] | select(.name==\"$branch\") | .name")

              # to track what we found
              echo "$endpoint -> $branch_found" &> /dev/stderr

              if [[ $branch_found != "" ]]; then
                found=$((found += 1))
              fi
            done

            echo $found
          }

          BE_TAGS=$(check_feature ${{ github.head_ref }} \
            https://registry.hub.docker.com/v1/repositories/dmsc/duo-backend/tags \
            https://api.github.com/repos/UserOfficeProject/user-office-backend/branches
          )

          FACTORY_TAGS=$(check_feature ${{ github.head_ref }} \
            https://registry.hub.docker.com/v1/repositories/dmsc/duo-factory/tags \
            https://api.github.com/repos/UserOfficeProject/user-office-factory/branches
          )

          BE_TAG=develop
          if [[ $BE_TAGS == "2" ]]; then
            BE_TAG="${{ github.head_ref }}"
          fi

          FACTORY_TAG=develop
          if [[ $FACTORY_TAGS == "2" ]]; then
            FACTORY_TAG="${{ github.head_ref }}"
          fi

          echo ::set-output name=BE_TAG::${BE_TAG}
          echo ::set-output name=FACTORY_TAG::${FACTORY_TAG}

      - name: Resolved
        run: |
          echo "BE_TAG: ${{ steps.resolve_rep.outputs.BE_TAG }}"
          echo "FACTORY_TAG: ${{ steps.resolve_rep.outputs.FACTORY_TAG }}"

  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: resolve_dep
    outputs:
      SDK_SHA: ${{ steps.set_sdk_sha.outputs.SDK_SHA }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Cache node_modules
        id: cached-modules
        uses: actions/cache@v2
        env:
          cache-name: node-modules-cache
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install dependencies
        if: steps.cached-modules.outputs.cache-hit != 'true'
        run: npm ci --production --loglevel error --no-fund

      - name: Download required repositories
        run: |
          cd "$GITHUB_WORKSPACE/.."
          git clone --depth 1 --branch "${{ needs.resolve_dep.outputs.BE_TAG }}" https://github.com/UserOfficeProject/user-office-backend.git

      - name: Setup base docker-compose
        run: |
          cd "$GITHUB_WORKSPACE/.."
          cat > docker-compose.all.yml << EOF
          version: "3.1"
          services:
            proxy:
              image: traefik:1.7
              command: --api --docker
              ports:
                - "80:80" # The HTTP port
              volumes:
                - /var/run/docker.sock:/var/run/docker.sock:ro
          EOF

      - name: Run docker-compose and generate SDK
        run: |
          cd "$GITHUB_WORKSPACE/.."

          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          export USER_OFFICE_BACKEND_TAG=${{ needs.resolve_dep.outputs.BE_TAG }}
          export USER_OFFICE_BACKEND_DIR=user-office-backend

          export USER_OFFICE_FACTORY_ENDPOINT=noop

          docker-compose -f docker-compose.all.yml \
            -f user-office-backend/docker-compose.e2e.yml \
            up -d

          sleep 15

          cd $GITHUB_WORKSPACE
          export SCHEMA_URL=http://localhost:80/graphql
          npm run generate:local

      - name: Set SDK SHA
        id: set_sdk_sha
        run: echo ::set-output name=SDK_SHA::${{ hashFiles('src/generated/sdk.ts') }}

      # - name: Upload SDK
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: fe-sdk-${{ github.head_ref }}
      #     path: src/generated/sdk.ts

      - name: Cache app docker layers and image
        id: cached-image
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}-${{ steps.set_sdk_sha.outputs.SDK_SHA }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}-
            ${{ runner.os }}-buildx-${{ github.head_ref }}-
            ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        if: steps.cached-image.outputs.cache-hit != 'true'
        uses: docker/setup-buildx-action@v1

      - name: Build and cache image
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          mkdir -p /tmp/.buildx-image-cache
          TAG=duo-frontend:${{ github.sha }}

          docker buildx build --cache-to="type=local,dest=/tmp/.buildx-layer-cache,mode=max" --cache-from="type=local,src=/tmp/.buildx-layer-cache" -t $TAG -o type=docker,dest=- . > /tmp/.buildx-image-cache/img.tar

  cypress:
    runs-on: ubuntu-latest
    needs: build

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build new e2e test image if changed
        run: |
          DOCKERFILE_VERSION=${{ hashFiles('cypress/Dockerfile') }}
          MANIFEST_URL="https://docker.pkg.github.com/v2/userofficeproject/user-office-frontend/e2e-cypress-core/manifests/$DOCKERFILE_VERSION"
          MANIFEST_STATUS=$(curl -H 'Authorization: token ${{ secrets.GITHUB_TOKEN }}' -o /dev/null --silent --get --write-out '%{http_code}' $MANIFEST_URL)
          TAG="docker.pkg.github.com/userofficeproject/user-office-frontend/e2e-cypress-core:$DOCKERFILE_VERSION"

          echo MANIFEST_STATUS $MANIFEST_STATUS

          if [[ $MANIFEST_STATUS != "200" ]]; then
            docker build -t $TAG ./cypress
            docker push $TAG
          fi
  e2e:
    runs-on: ubuntu-latest
    needs: [resolve_dep, build, cypress]

    steps:
      - uses: actions/checkout@v2

      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1
        with:
          registry: docker.pkg.github.com
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull cypress image
        run: |
          DOCKERFILE_VERSION=${{ hashFiles('cypress/Dockerfile') }}
          TAG="docker.pkg.github.com/userofficeproject/user-office-frontend/e2e-cypress-core:$DOCKERFILE_VERSION"
          docker pull $TAG 
          docker tag $TAG e2e-cypress:latest

      - name: Load app cache
        id: cached-image
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}-${{ needs.build.outputs.SDK_SHA }}

      - name: Fail on app cache miss
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          echo "No cache hit!"
          exit 1

      - name: Load cached app image
        run: |
          docker load --input /tmp/.buildx-image-cache/img.tar

      - name: Download required repositories
        run: |
          cd "$GITHUB_WORKSPACE/.."
          git clone --depth 1 --branch "${{ needs.resolve_dep.outputs.BE_TAG }}" https://github.com/UserOfficeProject/user-office-backend.git
          git clone --depth 1 --branch "${{ needs.resolve_dep.outputs.FACTORY_TAG }}" https://github.com/UserOfficeProject/user-office-factory.git

      - name: Setup base docker-compose
        run: |
          cd "$GITHUB_WORKSPACE/.."
          cat > docker-compose.all.yml << EOF
          version: "3.1"
          EOF

      - name: Run docker-compose
        env:
          SVC_ACC_TOKEN: ${{ secrets.SVC_ACC_TOKEN }}
        run: |
          cd "$GITHUB_WORKSPACE/.."

          REPO_DIR_NAME=$(basename $GITHUB_WORKSPACE)

          export USER_OFFICE_BACKEND_TAG=${{ needs.resolve_dep.outputs.BE_TAG }}
          export USER_OFFICE_BACKEND_DIR=user-office-backend

          export USER_OFFICE_FACTORY_TAG=${{ needs.resolve_dep.outputs.FACTORY_TAG }}
          export USER_OFFICE_FACTORY_ENDPOINT=http://factory:4500/generate

          export USER_OFFICE_FRONTEND_DIR=$REPO_DIR_NAME
          export BUILD_TAG=${{ github.sha }}

          docker-compose -f docker-compose.all.yml \
            -f user-office-backend/docker-compose.e2e.yml \
            -f user-office-factory/docker-compose.e2e.yml \
            -f "$REPO_DIR_NAME/docker-compose.e2e.yml" \
            up --exit-code-from cypress

      - name: Upload cypres screenshots
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: cypress-screenshots
          path: cypress/screenshots

  push:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: [build, e2e]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Load app cache
        id: cached-image
        uses: actions/cache@v2
        with:
          path: |
            /tmp/.buildx-layer-cache
            /tmp/.buildx-image-cache
          key: ${{ runner.os }}-buildx-${{ github.head_ref }}-${{ github.sha }}-${{ needs.build.outputs.SDK_SHA }}

      - name: Fail on cache miss
        if: steps.cached-image.outputs.cache-hit != 'true'
        run: |
          echo "No cache hit!"
          exit 1

      # For debugging capture the selected branch
      - name: Branch
        run: echo "Branch ${{ github.head_ref }}"

      - name: Load cached app image
        run: |
          docker load --input /tmp/.buildx-image-cache/img.tar

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push
        run: |
          docker tag duo-frontend:${{ github.sha }} dmsc/duo-frontend:${{ github.head_ref }}
          docker push dmsc/duo-frontend:${{ github.head_ref }}
